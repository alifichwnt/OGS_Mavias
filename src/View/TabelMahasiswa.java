/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import Database.Database;
import Models.Session;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.Chunk;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import java.util.Comparator;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Font.FontFamily;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfPCell;
import java.io.FileNotFoundException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Rizky Alif - 2KS2
 */
public class TabelMahasiswa extends javax.swing.JFrame {

    /**
     * Creates new form TabelMahasiswa
     */
    public TabelMahasiswa() {
        initComponents();
        setTitle("Tabel Mahasiswa Mavia's");
        // Panggil updateMahasiswaTable di konstruktor
        updateMahasiswaTable();
        //sort table
        sortTableDescending();
    }

    //hide collumn
    private void hideColumn(JTable table, int columnIndex) {
        table.getColumnModel().getColumn(columnIndex).setMinWidth(0);
        table.getColumnModel().getColumn(columnIndex).setMaxWidth(0);
        table.getColumnModel().getColumn(columnIndex).setWidth(0);
        table.getColumnModel().getColumn(columnIndex).setPreferredWidth(0);
    }

    //method untuk sorting isi tabel
    private void sortTableDescending() {
        DefaultTableModel model = (DefaultTableModel) mahasiswaTable.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        mahasiswaTable.setRowSorter(sorter);

        // Menerapkan Comparator untuk Nama (kolom 1) descending
        sorter.setComparator(1, new Comparator<String>() {
            @Override
            public int compare(String o1, String o2) {
                return o2.compareTo(o1);
            }
        });

        // Menerapkan Comparator untuk Tingkat (kolom 4) descending
        sorter.setComparator(4, new Comparator<String>() {
            @Override
            public int compare(String o1, String o2) {
                return o2.compareTo(o1);
            }
        });

        mahasiswaTable.setRowSorter(sorter);
    }

    // Metode untuk mengambil data dari database dan memperbarui tabel
    public final void updateMahasiswaTable() {
        DefaultTableModel model = (DefaultTableModel) mahasiswaTable.getModel();
        model.setRowCount(0); // Kosongkan tabel sebelum menambahkan data baru

        try {
            Connection conn = Database.getConnection();
            try (Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery("SELECT * FROM mahasiswa")) {

                while (rs.next()) {
                    int id = rs.getInt("id");
                    String nim = rs.getString("Nim");
                    String nama = rs.getString("Nama");
                    String jenisKelamin = rs.getString("JenisKelamin");
                    String noHP = rs.getString("NoHp");
                    String tingkat = rs.getString("Tingkat");

                    // Tambahkan baris baru ke tabel
                    model.addRow(new Object[]{id, nim, nama, jenisKelamin, noHP, tingkat});
                }

            }
            // Sembunyikan kolom id setelah data dimuat
            hideColumn(mahasiswaTable, 0);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        } finally {
            Database.closeConnection();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        logo = new javax.swing.JLabel();
        Header = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        mahasiswaTable = new javax.swing.JTable();
        backButton = new javax.swing.JButton();
        klikMahasiswaButton = new javax.swing.JButton();
        kasButton = new javax.swing.JButton();
        exportXLSXButton = new javax.swing.JButton();
        exportCSVButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        exportPDFButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 102, 0));
        jPanel1.setPreferredSize(new java.awt.Dimension(520, 470));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/header1.png"))); // NOI18N
        jPanel1.add(logo, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, 80, 70));

        Header.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        Header.setForeground(new java.awt.Color(255, 255, 255));
        Header.setText("TABEL MAHASISWA ");
        jPanel1.add(Header, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 40, -1, -1));

        mahasiswaTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "id", "NIM", "Nama", "Jenis Kelamin", "No HP", "Tingkat"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        mahasiswaTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mahasiswaTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(mahasiswaTable);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 90, 480, 280));

        backButton.setBackground(new java.awt.Color(255, 0, 0));
        backButton.setFont(new java.awt.Font("Microsoft JhengHei UI Light", 1, 12)); // NOI18N
        backButton.setForeground(new java.awt.Color(255, 255, 255));
        backButton.setText("BACK");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        jPanel1.add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 70, 20));

        klikMahasiswaButton.setBackground(new java.awt.Color(255, 153, 51));
        klikMahasiswaButton.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        klikMahasiswaButton.setForeground(new java.awt.Color(255, 255, 255));
        klikMahasiswaButton.setText("PILIH MAHASISWA");
        klikMahasiswaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                klikMahasiswaButtonActionPerformed(evt);
            }
        });
        jPanel1.add(klikMahasiswaButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 390, 140, 40));

        kasButton.setBackground(new java.awt.Color(0, 102, 102));
        kasButton.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        kasButton.setForeground(new java.awt.Color(255, 255, 255));
        kasButton.setText("ATUR KAS");
        kasButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kasButtonActionPerformed(evt);
            }
        });
        jPanel1.add(kasButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 390, 140, 40));

        exportXLSXButton.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        exportXLSXButton.setForeground(new java.awt.Color(51, 102, 0));
        exportXLSXButton.setText(".xlsx");
        exportXLSXButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportXLSXButtonActionPerformed(evt);
            }
        });
        jPanel1.add(exportXLSXButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 380, 60, -1));

        exportCSVButton.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        exportCSVButton.setForeground(new java.awt.Color(51, 102, 0));
        exportCSVButton.setText(".csv");
        exportCSVButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportCSVButtonActionPerformed(evt);
            }
        });
        jPanel1.add(exportCSVButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 410, 60, -1));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Export to :");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 410, -1, -1));

        exportPDFButton.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        exportPDFButton.setText(".pdf");
        exportPDFButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportPDFButtonActionPerformed(evt);
            }
        });
        jPanel1.add(exportPDFButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 440, 60, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mahasiswaTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mahasiswaTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_mahasiswaTableMouseClicked

    private void klikMahasiswaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_klikMahasiswaButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = mahasiswaTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Silahkan pilih baris terlebih dahulu");
        } else {
            DefaultTableModel model = (DefaultTableModel) mahasiswaTable.getModel();
            String id = model.getValueAt(selectedRow, 0).toString(); // Ambil NIM dari tabel

            // Buka MahasiswaFrameModify dan kirim NIM
            MahasiswaFrameModify mahasiswaFrame = new MahasiswaFrameModify();
            mahasiswaFrame.setDataFromTable(id); // Mengirim NIM untuk menampilkan data terkait di MahasiswaFrameModify
            mahasiswaFrame.setVisible(true);
            this.dispose(); // Menutup TabelMahasiswa frame setelah membuka MahasiswaFrameModify
        }
    }//GEN-LAST:event_klikMahasiswaButtonActionPerformed

    private void kasButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kasButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = mahasiswaTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Silahkan pilih baris terlebih dahulu");
        } else {
            DefaultTableModel model = (DefaultTableModel) mahasiswaTable.getModel();
            String nama = model.getValueAt(selectedRow, 2).toString(); // Ambil Nama dari tabel (kolom ke-3)
            String id = model.getValueAt(selectedRow, 0).toString();
                    
            // Buka UangKas dan kirim ID dan Nama
            UangKas uangKasFrame = new UangKas();
            uangKasFrame.setNamaField(nama);
            uangKasFrame.setIdMahasiswaField(id); // Mengirim ID untuk digunakan di UangKas
            uangKasFrame.setIdMahasiswaTextField(id); // Mengirim ID untuk digunakan di UangKas
            uangKasFrame.setVisible(true);
            this.dispose(); // Menutup TabelMahasiswa frame setelah membuka UangKas
        }
    }//GEN-LAST:event_kasButtonActionPerformed

    private void exportXLSXButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportXLSXButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save as XLSX File");
        fileChooser.setFileFilter(new FileNameExtensionFilter("Excel Files (*.xlsx)", "xlsx")); // Filter hanya file XLSX
        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            String filePath = fileToSave.getAbsolutePath();

            // Menambahkan ekstensi .xlsx jika belum ada
            if (!filePath.toLowerCase().endsWith(".xlsx")) {
                fileToSave = new File(filePath + ".xlsx");
            }

            try {
                Workbook wb = new XSSFWorkbook();
                Sheet sheet = wb.createSheet("Mahasiswa Data");
                DefaultTableModel model = (DefaultTableModel) mahasiswaTable.getModel();

                // Menulis judul kolom
                Row headerRow = sheet.createRow(0);
                for (int i = 0; i < model.getColumnCount(); i++) {
                    Cell cell = headerRow.createCell(i);
                    cell.setCellValue(model.getColumnName(i));
                }

                // Menulis data
                for (int i = 0; i < model.getRowCount(); i++) {
                    Row row = sheet.createRow(i + 1);
                    for (int j = 0; j < model.getColumnCount(); j++) {
                        Cell cell = row.createCell(j);
                        Object value = model.getValueAt(i, j);
                        if (value != null) {
                            cell.setCellValue(value.toString());
                        } else {
                            cell.setCellValue("NULL");
                        }
                    }
                }

                // Menyimpan workbook ke file
                try (FileOutputStream fos = new FileOutputStream(fileToSave)) {
                    wb.write(fos);
                    JOptionPane.showMessageDialog(this, "File successfully saved as XLSX!", "Information", JOptionPane.INFORMATION_MESSAGE);
                }

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error saving XLSX file: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_exportXLSXButtonActionPerformed

    private void exportCSVButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportCSVButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Save as CSV File");
        fileChooser.setFileFilter(new FileNameExtensionFilter("CSV Files (*.csv)", "csv")); // Filter hanya file CSV
        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
            String filePath = fileToSave.getAbsolutePath();

            // Menambahkan ekstensi .csv jika belum ada
            if (!filePath.toLowerCase().endsWith(".csv")) {
                fileToSave = new File(filePath + ".csv");
            }

            try (FileWriter fw = new FileWriter(fileToSave); BufferedWriter bw = new BufferedWriter(fw)) {

                // Menulis judul kolom
                for (int i = 0; i < mahasiswaTable.getColumnCount(); i++) {
                    bw.write(mahasiswaTable.getColumnName(i) + ",");
                }
                bw.newLine();

                // Menulis data ke file
                for (int i = 0; i < mahasiswaTable.getRowCount(); i++) {
                    for (int j = 0; j < mahasiswaTable.getColumnCount(); j++) {
                        Object value = mahasiswaTable.getValueAt(i, j);
                        if (value != null) {
                            bw.write(value.toString() + ",");
                        } else {
                            bw.write("NULL,");
                        }
                    }
                    bw.newLine();
                }

                JOptionPane.showMessageDialog(this, "File successfully saved as CSV!", "Information", JOptionPane.INFORMATION_MESSAGE);

            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error saving CSV file: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_exportCSVButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();

        // Buka MahasiswaFrameModify
        MahasiswaFrame mahasiswa = new MahasiswaFrame();
        mahasiswa.setVisible(true);
    }//GEN-LAST:event_backButtonActionPerformed

    private void exportPDFButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportPDFButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a file save");
        fileChooser.setFileFilter(new FileNameExtensionFilter("PDF Document (*.pdf)", "pdf"));
        int userSelection = fileChooser.showSaveDialog(this);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File saveFile = fileChooser.getSelectedFile();
            String filePath = saveFile.getAbsolutePath();

            // Tambahkan ekstensi .pdf jika belum ada
            if (!filePath.toLowerCase().endsWith(".pdf")) {
                saveFile = new File(filePath + ".pdf");
            }

            try {
                Document document = new Document();
                PdfWriter.getInstance(document, new FileOutputStream(saveFile));
                document.open();

                // Header
                Font fontHeader = new Font(Font.FontFamily.COURIER, 20, Font.BOLD);
                Paragraph header = new Paragraph();
                header.setAlignment(Element.ALIGN_CENTER);
                // Tambahkan teks header
                header.add(new Chunk(" HIMPUNAN MAHASISWA DAERAH MAVIA'S", fontHeader));
                document.add(header);

                // Spasi antara header dan tabel
                document.add(new Paragraph(" "));

                // Tabel
                PdfPTable table = new PdfPTable(mahasiswaTable.getColumnCount());
                for (int i = 0; i < mahasiswaTable.getColumnCount(); i++) {
                    PdfPCell cell = new PdfPCell(new Paragraph(mahasiswaTable.getColumnName(i)));
                    table.addCell(cell);
                }
                for (int row = 0; row < mahasiswaTable.getRowCount(); row++) {
                    for (int col = 0; col < mahasiswaTable.getColumnCount(); col++) {
                        Object value = mahasiswaTable.getValueAt(row, col);
                        if (value != null) {
                            PdfPCell cell = new PdfPCell(new Paragraph(value.toString()));
                            table.addCell(cell);
                        } else {
                            PdfPCell cell = new PdfPCell(new Paragraph("NULL"));
                            table.addCell(cell);
                        }
                    }
                }
                document.add(table);

                // Footer
                Font fontFooter = new Font(Font.FontFamily.HELVETICA, 20, Font.ITALIC);
                Paragraph footer = new Paragraph("KEPENGERUSAN MAVIA'S 2024", fontFooter);
                footer.setAlignment(Element.ALIGN_CENTER);
                footer.setSpacingBefore(20); // Tambahkan jarak antara tabel dan footer
                document.add(footer);

                document.close();
                JOptionPane.showMessageDialog(this, "PDF successfully exported!", "Export Success", JOptionPane.INFORMATION_MESSAGE);

            } catch (FileNotFoundException | DocumentException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error exporting PDF", "Export Error", JOptionPane.ERROR_MESSAGE);
            } catch (IOException ex) {
                Logger.getLogger(TabelMahasiswa.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_exportPDFButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TabelMahasiswa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TabelMahasiswa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TabelMahasiswa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TabelMahasiswa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TabelMahasiswa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        if (!Session.isAuthenticated()) {
            JOptionPane.showMessageDialog(null, "Harap Login Terlebih Dahulu.");
            java.awt.EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    new Login().setVisible(true);
                }
            });
        } else {
            // Jika sudah terautentikasi, lanjutkan ke main menu atau halaman lain
            java.awt.EventQueue.invokeLater(new Runnable() {
                @Override
                public void run() {
                    new TabelMahasiswa().setVisible(true);
                }
            });
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Header;
    private javax.swing.JButton backButton;
    private javax.swing.JButton exportCSVButton;
    private javax.swing.JButton exportPDFButton;
    private javax.swing.JButton exportXLSXButton;
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton kasButton;
    private javax.swing.JButton klikMahasiswaButton;
    private javax.swing.JLabel logo;
    private javax.swing.JTable mahasiswaTable;
    // End of variables declaration//GEN-END:variables
}
